name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0.2
        options: --privileged

    steps:
      - name: Checkout main code
        uses: actions/checkout@v4

      - name: Node.js setup for Svelte
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies for frontend
        working-directory: ./visual-compiler/frontend
        run: npm install

      - name: Tests for frontend
        working-directory: ./visual-compiler/frontend
        run: npm run test -- --coverage

      - name: Upload coverage for frontend
        uses: codecov/codecov-action@v4
        with:
          flags: frontend
          name: coverage-frontend
          directory: ./visual-compiler/frontend
          files: ./visual-compiler/frontend/coverage/lcov.info

      - name: Go setup for Backend
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Linting for Frontend using ESLint
        working-directory: ./visual-compiler/frontend
        run: npm run lint -- --fix

      - name: Go Modules Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{runner.os}}-go-${{hashFiles('**/go.sum')}}
          restore-keys: |
            ${{runner.os}}-go-

      - name: Set environment variables for Mongo Connection
        run: echo "Set env for MongoDB"
        env:
          Mongo_username: ${{ secrets.MONGODB_USERNAME }}
          Mongo_password: ${{secrets.MONGODB_PASSWORD}}
          Mongo_URI: ${{secrets.MONGODB_URI}}

      - name: Tests for Backend
        working-directory: ./visual-compiler/backend
        env:
          Mongo_username: ${{ secrets.MONGODB_USERNAME }}
          Mongo_password: ${{secrets.MONGODB_PASSWORD}}
          Mongo_URI: ${{secrets.MONGODB_URI}}
        run: go test ./... -coverprofile=coverage.out

      - name: Upload coverage for backend
        uses: codecov/codecov-action@v4
        with:
          flags: backend
          name: coverage-backend
          directory: ./visual-compiler/backend
          files: coverage.out

      - name: Linting for Backend using Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: ./visual-compiler/backend/.semgrep-go.yml

      - name: Docker Compose Installation
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Temporary env file for Backend Dockerizing (is ignored)
        run: |
          echo "Mongo_username=${{secrets.MONGODB_USERNAME}}" >> backend.env
          echo "Mongo_password=${{secrets.MONGODB_PASSWORD}}" >> backend.env
          echo "Mongo_URI=${{secrets.MONGODB_URI}}" >> backend.env

      - name: Docker Build and Compose for deployment
        run: docker compose --env-file backend.env up -d --build

      - name: Setting up SSH for EC2 instance
        run: |
          mkdir -p ~/.ssh
          echo "${{secrets.EC2_SSH_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.EC2_HOST}} >> ~/.ssh/known_hosts

      - name: Temporary env file for deployment
        run: |
          echo "Mongo_username=${{secrets.MONGODB_USERNAME}}" >> backend.env
          echo "Mongo_password=${{secrets.MONGODB_PASSWORD}}" >> backend.env
          echo "Mongo_URI=${{secrets.MONGODB_URI}}" >> backend.env

      - name: Copy image to instance
        run: |
          rsync -az -e "ssh -i ~/.ssh/id_rsa" ./visual-compiler docker-compose.yml backend.env ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}}:/home/${{secrets.EC2_USER}}/app/

      - name: SSH into instance and Compose
        run: |
          ssh -i ~/.ssh/id_rsa ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << 'EOF'
            cd ~/app 
            docker-compose down || true
            docker-compose up -d --build
          EOF