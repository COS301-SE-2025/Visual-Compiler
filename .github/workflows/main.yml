name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:24.0.2
        options: --privileged

    steps:
      - name: Checkout main code
        uses: actions/checkout@v4

      - name: Node.js setup for Svelte
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies for frontend
        working-directory: ./visual-compiler/frontend
        run: npm ci

      - name: Go setup for Backend
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Go Modules Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{runner.os}}-go-${{hashFiles('**/go.sum')}}
          restore-keys: |
            ${{runner.os}}-go-

      - name: Set environment variables for Mongo Connection
        run: echo "Set env for MongoDB"
        env:
          Mongo_username: ${{ secrets.MONGODB_USERNAME }}
          Mongo_password: ${{secrets.MONGODB_PASSWORD}}
          Mongo_URI: ${{secrets.MONGODB_URI}}
          AUTH0_DOMAIN: ${{secrets.AUTH0_DOMAIN}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
          CUSTOM_API: ${{secrets.CUSTOM_API}}
          OPENAI_API_KEY: ${{secrets.OPENAI_API_KEY}}

      - name: Docker Compose Installation
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Temporary env file for Backend Dockerizing (is ignored)
        run: |
          echo "Mongo_username=${{secrets.MONGODB_USERNAME}}" >> backend.env
          echo "Mongo_password=${{secrets.MONGODB_PASSWORD}}" >> backend.env
          echo "Mongo_URI=${{secrets.MONGODB_URI}}" >> backend.env
          echo "AUTH0_DOMAIN=${{secrets.AUTH0_DOMAIN}}" >> backend.env
          echo "CLIENT_ID=${{secrets.CLIENT_ID}}" >> backend.env
          echo "CLIENT_SECRET=${{secrets.CLIENT_SECRET}}" >> backend.env
          echo "CUSTOM_API=${{secrets.CUSTOM_API}}" >> backend.env
          echo "OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}" >> backend.env

      - name: Docker images build
        run: |
          docker build -t vc-frontend:latest ./visual-compiler/frontend
          docker build -t vc-backend:latest ./visual-compiler/backend

      - name: Save images as executable files
        run: |
          docker save vc-frontend:latest -o frontend.tar
          docker save vc-backend:latest -o backend.tar
      
      - name: Setting up SSH for EC2 instance
        run: |
          mkdir -p ~/.ssh
          echo "${{secrets.EC2_SSH_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{secrets.EC2_HOST}} >> ~/.ssh/known_hosts

      - name: Copy image to instance
        run: |
          rsync -az -e "ssh -i ~/.ssh/id_rsa" frontend.tar backend.tar docker-compose.yml backend.env ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}}:/home/${{secrets.EC2_USER}}/app/

      - name: SSH into instance and Compose
        run: |
          ssh -i ~/.ssh/id_rsa ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << EOF
            cd ~/app 

            echo "Mongo_username=${{secrets.MONGODB_USERNAME}}" >> backend.env
            echo "Mongo_password=${{secrets.MONGODB_PASSWORD}}" >> backend.env
            echo "Mongo_URI=${{secrets.MONGODB_URI}}" >> backend.env
            echo "AUTH0_DOMAIN=${{secrets.AUTH0_DOMAIN}}" >> backend.env
            echo "CLIENT_ID=${{secrets.CLIENT_ID}}" >> backend.env
            echo "CLIENT_SECRET=${{secrets.CLIENT_SECRET}}" >> backend.env
            echo "CUSTOM_API=${{secrets.CUSTOM_API}}" >> backend.env
            echo "OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}" >> backend.env

            docker load -i frontend.tar
            docker load -i backend.tar

            docker-compose down || true
            docker-compose --env-file backend.env up -d
          EOF
