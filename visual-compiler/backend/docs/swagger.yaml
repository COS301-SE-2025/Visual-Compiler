basePath: /api
definitions:
  handlers.AnalyseUserInputs:
    properties:
      grammar_rules:
        allOf:
        - $ref: '#/definitions/services.GrammarRules'
        description: Grammar rules to be analysed
      project_name:
        description: User's project name
        type: string
      scope_rules:
        description: Scope rules for the variables/functions scopes
        items:
          $ref: '#/definitions/services.ScopeRule'
        type: array
      type_rules:
        description: Type rules for Type Checking
        items:
          $ref: '#/definitions/services.TypeRule'
        type: array
      users_id:
        description: User's ID for storing purposes
        example: 685df259c1294de5546b045f
        type: string
    required:
    - grammar_rules
    - project_name
    - scope_rules
    - type_rules
    - users_id
    type: object
  handlers.DeleteRequest:
    properties:
      users_id:
        example: 685df259c1294de5546b045f
        type: string
    required:
    - users_id
    type: object
  handlers.IDRequest:
    properties:
      project_name:
        description: User's project name
        type: string
      users_id:
        description: Represents the User's ID from frontend
        type: string
    required:
    - project_name
    - users_id
    type: object
  handlers.LoginReq:
    properties:
      login:
        description: Either the user's email or username
        type: string
      password:
        description: User's password
        type: string
    required:
    - login
    - password
    type: object
  handlers.ProjectRequest:
    properties:
      pipeline:
        additionalProperties: {}
        description: User's saved pipeline
        type: object
      project_name:
        description: User's project name
        type: string
      users_id:
        description: Represents the User's ID from frontend
        type: string
    required:
    - pipeline
    - project_name
    - users_id
    type: object
  handlers.ReadGrammerFromUser:
    properties:
      project_name:
        description: User's project name
        type: string
      rules:
        description: User's defined rules
        items:
          $ref: '#/definitions/services.ParsingRule'
        type: array
      start:
        description: User's defined start variable
        example: S
        type: string
      terminals:
        description: User's defined terminal variables
        example:
        - KEYWORD
        - ' IDENTIFIER'
        - ' OPERATOR'
        - ' NUMBER'
        - ' PUNCTUATION'
        items:
          type: string
        type: array
      users_id:
        description: User's ID for storing purposes
        example: 685df259c1294de5546b045f
        type: string
      variables:
        description: User's defined variables
        example:
        - S
        - ' Decl'
        items:
          type: string
        type: array
    required:
    - project_name
    - rules
    - start
    - terminals
    - users_id
    - variables
    type: object
  handlers.Request:
    properties:
      email:
        description: User's Email address
        type: string
      password:
        description: User's password
        minLength: 8
        type: string
      username:
        description: User's username
        minLength: 6
        type: string
    required:
    - email
    - password
    - username
    type: object
  handlers.RulesRequest:
    properties:
      pairs:
        description: Represents the pairs of Type and Regex
        items:
          $ref: '#/definitions/services.TypeRegex'
        type: array
      project_name:
        description: User's project name
        type: string
      users_id:
        description: Represents the User's ID from frontend
        type: string
    required:
    - pairs
    - project_name
    - users_id
    type: object
  handlers.SourceCodeOnlyRequest:
    properties:
      project_name:
        description: User's project name
        type: string
      source_code:
        description: Represents the User's source code
        type: string
      users_id:
        description: Represents the User's ID from frontend
        type: string
    required:
    - project_name
    - source_code
    - users_id
    type: object
  handlers.TranslatorRules:
    properties:
      project_name:
        description: User's project name
        type: string
      translation_rules:
        description: Translation Rules
        items:
          $ref: '#/definitions/services.TranslationRule'
        type: array
      users_id:
        description: User's ID for searching and storing purposes
        example: 685df259c1294de5546b045f
        type: string
    required:
    - project_name
    - translation_rules
    - users_id
    type: object
  handlers.readDFARequest:
    properties:
      accepting_states:
        description: Represents the accepting states of the automata
        items:
          $ref: '#/definitions/services.AcceptingState'
        type: array
      project_name:
        description: User's project name
        type: string
      start_state:
        description: Represents the start state of the automata
        type: string
      states:
        description: Represents the states of the automata
        items:
          type: string
        type: array
      transitions:
        description: Represents the transitions of the automata
        items:
          $ref: '#/definitions/services.Transition'
        type: array
      users_id:
        description: Represents the User's ID from frontend
        type: string
    required:
    - project_name
    - users_id
    type: object
  services.AcceptingState:
    properties:
      state:
        type: string
      token_type:
        type: string
    type: object
  services.GrammarRules:
    properties:
      assignmentRule:
        type: string
      functionRule:
        type: string
      operatorRule:
        type: string
      parameterRule:
        type: string
      termRule:
        type: string
      typeRule:
        type: string
      variableRule:
        type: string
    type: object
  services.ParsingRule:
    properties:
      input:
        type: string
      output:
        items:
          type: string
        type: array
    type: object
  services.ScopeRule:
    properties:
      end:
        type: string
      entered:
        type: boolean
      start:
        type: string
    type: object
  services.Transition:
    properties:
      from:
        type: string
      label:
        type: string
      to:
        type: string
    type: object
  services.TranslationRule:
    properties:
      sequence:
        items:
          type: string
        type: array
      translation:
        items:
          type: string
        type: array
    type: object
  services.TypeRegex:
    properties:
      regex:
        type: string
      type:
        type: string
    type: object
  services.TypeRule:
    properties:
      assignment:
        type: string
      lhsdata:
        type: string
      operator:
        items:
          type: string
        type: array
      resultData:
        type: string
      rhsdata:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Documentation for Visual Compiler API endpoints
  title: Visual Compiler API
  version: "1.0"
paths:
  /analysing/analyse:
    post:
      consumes:
      - application/json
      description: Accepts scope rules, grammar rules and type rules from the user.
        Searches the database for the syntax tree created from the user. If it exists,
        the analysing process is performed and the artefacts are stored in the database
      parameters:
      - description: Read Analysing Inputs From User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AnalyseUserInputs'
      produces:
      - application/json
      responses:
        "200":
          description: Artefacts Successfully stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or artefacts failed to insert
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Syntax Tree not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Analysing phase
      tags:
      - Analysing
  /lexing/code:
    post:
      consumes:
      - application/json
      description: Takes the user's source code and stores it with the user's ID.
        If a source code already exists, it overwrites that code and removes any other
        created fields (tokens, dfa, nfa, rules)
      parameters:
      - description: Read Source Code From User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SourceCodeOnlyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Source code successfully stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Store the user's source code
      tags:
      - Lexing
  /lexing/dfa:
    post:
      consumes:
      - application/json
      description: Takes the user's DFA and stores it with the user's ID. If a DFA
        already exists, it overwrites that DFA and removes any other created fields
        (tokens, rules)
      parameters:
      - description: Read DFA from User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.readDFARequest'
      produces:
      - application/json
      responses:
        "200":
          description: DFA successfully and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reads DFA from user
      tags:
      - Lexing
  /lexing/dfaToRegex:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's DFA. If found, the DFA is
        used to create the Regular Expressions (Rules). The Rules are either created
        or ,if already existing, updated. If the DFA is not found, returns an error
      parameters:
      - description: Create Regex from Stored DFA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Rules successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: DFA not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Converts stored DFA to Regular Expressions (Rules)
      tags:
      - Lexing
  /lexing/dfaToTokens:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's DFA. If found, the DFA and
        code are used to create the tokens and/or unidentified tokens. The tokens
        are either created or ,if already existing, updated. If the DFA and/or source
        code is not found, returns an error
      parameters:
      - description: Create Tokens from Stored DFA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Tokenization failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: DFA/source code not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Creates tokens from a stored DFA and source code
      tags:
      - Lexing
  /lexing/lexer:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's rules. If found, the source
        code and rules are used in the lexer to create the tokens and/or unidentified
        tokens. The tokens are either created or ,if already existing, updated. If
        the source code or rules are not found, returns an error
      parameters:
      - description: Create Tokens from Stored Code and Rules
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Lexing failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Source code and/or rules not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Lexes the user's stored rules
      tags:
      - Lexing
  /lexing/nfaToDFA:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's NFA. If found, the NFA is
        used to create the DFA. The DFA is either created or ,if already existing,
        updated. If the NFA is not found, returns an error
      parameters:
      - description: Create DFA from NFA
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: DFA successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Rules not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Converts stored NFA to an DFA
      tags:
      - Lexing
  /lexing/regexToDFA:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's Rules. If found, the Rules
        are used to create the DFA. The DFA is either created or ,if already existing,
        updated. If the Rules are not found, returns an error
      parameters:
      - description: Create DFA from Stored Rules
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: DFA successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Rules not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Converts stored Rules to an DFA
      tags:
      - Lexing
  /lexing/regexToNFA:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's Rules. If found, the Rules
        are used to create the NFA. The NFA is either created or ,if already existing,
        updated. If the Rules are not found, returns an error
      parameters:
      - description: Create NFA from Stored Rules
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: NFA successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Rules not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Converts stored Rules to an NFA
      tags:
      - Lexing
  /lexing/rules:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's source code. If found, the
        pairs defined by the user are used to create the rules. The rules are either
        created or ,if already existing, updated. If the source code is not found,
        returns an error
      parameters:
      - description: Read Pairs and From User to Create Rules
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RulesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Rules successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Regex rules creation failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Source code not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create rules from stored source code
      tags:
      - Lexing
  /parsing/grammar:
    post:
      consumes:
      - application/json
      description: Accepts grammar variables, terminals, start variable, and rules
        from the user and stores them in the database. If it already exists, it updates
        the current grammar
      parameters:
      - description: Read Grammer From User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ReadGrammerFromUser'
      produces:
      - application/json
      responses:
        "200":
          description: Grammar successfully read and stored/updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or Grammar failed to insert
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Processs and store user-defined grammer
      tags:
      - Parsing
  /parsing/tree:
    post:
      consumes:
      - application/json
      description: Searches database for Grammar and Tokens. If found, and creates
        and stores the tree.
      produces:
      - application/json
      responses:
        "200":
          description: Syntax tree successfully created and stored/updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or Syntax Tree failed to insert
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tokens or Grammer not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create and store syntax tree from stored grammar and tokens
      tags:
      - Parsing
  /parsing/treeString:
    post:
      consumes:
      - application/json
      description: Searches database for an existing syntax tree. If found, and creates
        and stores the tree as a string.
      produces:
      - application/json
      responses:
        "200":
          description: Syntax tree String successfully created and stored/updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or Syntax Tree String failed to insert
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Syntax Tree not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create and store syntax tree as a string from stored tree
      tags:
      - Parsing
  /translating/rules:
    post:
      consumes:
      - application/json
      description: Takes the user's rules, reads it, verifies it and stores it with
        the user's ID. If translation rules already exist, it overwrites those rules
        and removes any other created fields (translation)
      parameters:
      - description: Read Translation Rules From User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.TranslatorRules'
      produces:
      - application/json
      responses:
        "200":
          description: Translation Rules successfully stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Translation rules failed to insert
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create translation rules
      tags:
      - Translating
  /translating/translate:
    post:
      consumes:
      - application/json
      description: Searches the database for the user's Syntax tree and Translation
        Rules. If found, both are used to translate the tree into code. The code is
        either created or ,if already existing, updated. If the syntax tree and translation
        rules are not found, returns an error
      parameters:
      - description: Create Code from Syntax Tree and Translation Rules
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Code successfully created and stored
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Tree not found/Rules not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Translates syntax tree using the translation rules into code
      tags:
      - Translating
  /users/delete:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: Delete user by ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete User
      tags:
      - Users
  /users/deleteProject:
    delete:
      consumes:
      - application/json
      description: Deletes a project and all associated fields in every collection
        in the database
      parameters:
      - description: Delete Project
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted project
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete project
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a project
      tags:
      - Users
  /users/getProject:
    get:
      consumes:
      - application/json
      description: Gets all the details about a user's project in every collection
        in the database
      parameters:
      - description: Name of project
        in: query
        name: project_name
        required: true
        type: string
      - description: User's ID
        in: query
        name: users_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved all project details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input/Conversion failed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error in reading from specific collection
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a project
      tags:
      - Users
  /users/getProjects:
    get:
      consumes:
      - application/json
      description: Gets all the user's project names
      parameters:
      - description: User's ID
        in: query
        name: users_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved all project names
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all user's projects
      tags:
      - Users
  /users/getUsers:
    get:
      consumes:
      - application/json
      description: Gets all users currently in the database
      produces:
      - application/json
      responses:
        "200":
          description: Users successfully found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user with correct credentials
      parameters:
      - description: Login User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: User login successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found/Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login User
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register user with credentials
      parameters:
      - description: Register User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.Request'
      produces:
      - application/json
      responses:
        "201":
          description: User registration successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username taken
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register User
      tags:
      - Users
  /users/save:
    post:
      consumes:
      - application/json
      description: Saves the project name in the Users table
      parameters:
      - description: Save User's Defined Project Name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.IDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Project name already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Save project name
      tags:
      - Users
  /users/savePipeline:
    post:
      consumes:
      - application/json
      description: Saves the project's pipeline to be shown when the user opens that
        project on the frontend
      parameters:
      - description: Save User's Pipeline
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Pipeline saved
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Save project pipeline from frontend
      tags:
      - Users
swagger: "2.0"
