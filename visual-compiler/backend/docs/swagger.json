{
    "swagger": "2.0",
    "info": {
        "description": "Documentation for Visual Compiler API endpoints",
        "title": "Visual Compiler API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/analysing/analyse": {
            "post": {
                "description": "Accepts scope rules, grammar rules and type rules from the user. Searches the database for the syntax tree created from the user. If it exists, the analysing process is performed and the artefacts are stored in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analysing"
                ],
                "summary": "Analysing phase",
                "parameters": [
                    {
                        "description": "Read Analysing Inputs From User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AnalyseUserInputs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Artefacts Successfully stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or artefacts failed to insert",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Syntax Tree not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/code": {
            "post": {
                "description": "Takes the user's source code and stores it with the user's ID. If a source code already exists, it overwrites that code and removes any other created fields (tokens, dfa, nfa, rules)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Store the user's source code",
                "parameters": [
                    {
                        "description": "Read Source Code From User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SourceCodeOnlyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source code successfully stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/dfa": {
            "post": {
                "description": "Takes the user's DFA and stores it with the user's ID. If a DFA already exists, it overwrites that DFA and removes any other created fields (tokens, rules)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Reads DFA from user",
                "parameters": [
                    {
                        "description": "Read DFA from User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.readDFARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DFA successfully and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/dfaToRegex": {
            "post": {
                "description": "Searches the database for the user's DFA. If found, the DFA is used to create the Regular Expressions (Rules). The Rules are either created or ,if already existing, updated. If the DFA is not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Converts stored DFA to Regular Expressions (Rules)",
                "parameters": [
                    {
                        "description": "Create Regex from Stored DFA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rules successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "DFA not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/dfaToTokens": {
            "post": {
                "description": "Searches the database for the user's DFA. If found, the DFA and code are used to create the tokens and/or unidentified tokens. The tokens are either created or ,if already existing, updated. If the DFA and/or source code is not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Creates tokens from a stored DFA and source code",
                "parameters": [
                    {
                        "description": "Create Tokens from Stored DFA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Tokenization failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "DFA/source code not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/lexer": {
            "post": {
                "description": "Searches the database for the user's rules. If found, the source code and rules are used in the lexer to create the tokens and/or unidentified tokens. The tokens are either created or ,if already existing, updated. If the source code or rules are not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Lexes the user's stored rules",
                "parameters": [
                    {
                        "description": "Create Tokens from Stored Code and Rules",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Lexing failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Source code and/or rules not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/nfaToDFA": {
            "post": {
                "description": "Searches the database for the user's NFA. If found, the NFA is used to create the DFA. The DFA is either created or ,if already existing, updated. If the NFA is not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Converts stored NFA to an DFA",
                "parameters": [
                    {
                        "description": "Create DFA from NFA",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DFA successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rules not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/regexToDFA": {
            "post": {
                "description": "Searches the database for the user's Rules. If found, the Rules are used to create the DFA. The DFA is either created or ,if already existing, updated. If the Rules are not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Converts stored Rules to an DFA",
                "parameters": [
                    {
                        "description": "Create DFA from Stored Rules",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DFA successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rules not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/regexToNFA": {
            "post": {
                "description": "Searches the database for the user's Rules. If found, the Rules are used to create the NFA. The NFA is either created or ,if already existing, updated. If the Rules are not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Converts stored Rules to an NFA",
                "parameters": [
                    {
                        "description": "Create NFA from Stored Rules",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NFA successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rules not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/lexing/rules": {
            "post": {
                "description": "Searches the database for the user's source code. If found, the pairs defined by the user are used to create the rules. The rules are either created or ,if already existing, updated. If the source code is not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexing"
                ],
                "summary": "Create rules from stored source code",
                "parameters": [
                    {
                        "description": "Read Pairs and From User to Create Rules",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RulesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rules successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Regex rules creation failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Source code not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/optimising/optimise": {
            "post": {
                "description": "Optimises the user's stored code with parameters for optimisation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Optimising"
                ],
                "summary": "Optimises stored code",
                "parameters": [
                    {
                        "description": "Optimise code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.OptimiseCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Code successfully optimised and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/optimising/source_code": {
            "post": {
                "description": "Reads in new code from the user. Starts the optimising process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Optimising"
                ],
                "summary": "Reads new code for optimising",
                "parameters": [
                    {
                        "description": "Read optimising code from User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SourceCodeOnlyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Optimising code successfully and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/parsing/grammar": {
            "post": {
                "description": "Accepts grammar variables, terminals, start variable, and rules from the user and stores them in the database. If it already exists, it updates the current grammar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parsing"
                ],
                "summary": "Processs and store user-defined grammer",
                "parameters": [
                    {
                        "description": "Read Grammer From User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ReadGrammerFromUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Grammar successfully read and stored/updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or Grammar failed to insert",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/parsing/tree": {
            "post": {
                "description": "Searches database for Grammar and Tokens. If found, and creates and stores the tree.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parsing"
                ],
                "summary": "Create and store syntax tree from stored grammar and tokens",
                "responses": {
                    "200": {
                        "description": "Syntax tree successfully created and stored/updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or Syntax Tree failed to insert",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Tokens or Grammer not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/parsing/treeString": {
            "post": {
                "description": "Searches database for an existing syntax tree. If found, and creates and stores the tree as a string.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Parsing"
                ],
                "summary": "Create and store syntax tree as a string from stored tree",
                "responses": {
                    "200": {
                        "description": "Syntax tree String successfully created and stored/updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or Syntax Tree String failed to insert",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Syntax Tree not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/translating/rules": {
            "post": {
                "description": "Takes the user's rules, reads it, verifies it and stores it with the user's ID. If translation rules already exist, it overwrites those rules and removes any other created fields (translation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Translating"
                ],
                "summary": "Create translation rules",
                "parameters": [
                    {
                        "description": "Read Translation Rules From User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TranslatorRules"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Translation Rules successfully stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Translation rules failed to insert",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/translating/translate": {
            "post": {
                "description": "Searches the database for the user's Syntax tree and Translation Rules. If found, both are used to translate the tree into code. The code is either created or ,if already existing, updated. If the syntax tree and translation rules are not found, returns an error",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Translating"
                ],
                "summary": "Translates syntax tree using the translation rules into code",
                "parameters": [
                    {
                        "description": "Create Code from Syntax Tree and Translation Rules",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Code successfully created and stored",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Tree not found/Rules not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/delete": {
            "delete": {
                "description": "Delete user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "description": "Delete user by ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/deleteProject": {
            "delete": {
                "description": "Deletes a project and all associated fields in every collection in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "description": "Delete Project",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted project",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete project",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/getProject": {
            "get": {
                "description": "Gets all the details about a user's project in every collection in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of project",
                        "name": "project_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's ID",
                        "name": "users_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved all project details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input/Conversion failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error in reading from specific collection",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/getProjects": {
            "get": {
                "description": "Gets all the user's project names",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all user's projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's ID",
                        "name": "users_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved all project names",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/getUsers": {
            "get": {
                "description": "Gets all users currently in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Users successfully found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Login user with correct credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "Login User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found/Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Register user with credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "Register User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Username taken",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/save": {
            "post": {
                "description": "Saves the project name in the Users table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Save project name",
                "parameters": [
                    {
                        "description": "Save User's Defined Project Name",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.IDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Project name already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/savePipeline": {
            "post": {
                "description": "Saves the project's pipeline to be shown when the user opens that project on the frontend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Save project pipeline from frontend",
                "parameters": [
                    {
                        "description": "Save User's Pipeline",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pipeline saved",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/update": {
            "patch": {
                "description": "Update user details. Either updating username, email or both",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "description": "Edit User",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User update successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Username/Email taken",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AdminRequest": {
            "type": "object",
            "required": [
                "admin_id",
                "users_id"
            ],
            "properties": {
                "admin_id": {
                    "description": "Represents the Admin's ID from frontend",
                    "type": "string"
                },
                "email": {
                    "description": "Optional: User's new email address",
                    "type": "string"
                },
                "username": {
                    "description": "Optional: User's new username",
                    "type": "string"
                },
                "users_id": {
                    "description": "Represents the User's ID from frontend",
                    "type": "string"
                }
            }
        },
        "handlers.AnalyseUserInputs": {
            "type": "object",
            "required": [
                "grammar_rules",
                "project_name",
                "scope_rules",
                "type_rules"
            ],
            "properties": {
                "grammar_rules": {
                    "description": "Grammar rules to be analysed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/services.GrammarRules"
                        }
                    ]
                },
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "scope_rules": {
                    "description": "Scope rules for the variables/functions scopes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.ScopeRule"
                    }
                },
                "type_rules": {
                    "description": "Type rules for Type Checking",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TypeRule"
                    }
                }
            }
        },
        "handlers.DeleteRequest": {
            "type": "object",
            "required": [
                "users_id"
            ],
            "properties": {
                "users_id": {
                    "type": "string",
                    "example": "685df259c1294de5546b045f"
                }
            }
        },
        "handlers.IDRequest": {
            "type": "object",
            "required": [
                "project_name",
                "users_id"
            ],
            "properties": {
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "users_id": {
                    "description": "Represents the User's ID from frontend",
                    "type": "string"
                }
            }
        },
        "handlers.LoginReq": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "description": "Either the user's email or username",
                    "type": "string"
                },
                "password": {
                    "description": "User's password",
                    "type": "string"
                }
            }
        },
        "handlers.OptimiseCodeRequest": {
            "type": "object",
            "required": [
                "project_name"
            ],
            "properties": {
                "constant_folding": {
                    "description": "Simplify any code before execution (3 + 4 becomes 7 before execution)",
                    "type": "boolean"
                },
                "dead_code": {
                    "description": "Remove any code that will never be executed",
                    "type": "boolean"
                },
                "loop_unrolling": {
                    "description": "Expand any loops",
                    "type": "boolean"
                },
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                }
            }
        },
        "handlers.ProjectRequest": {
            "type": "object",
            "required": [
                "pipeline",
                "project_name",
                "users_id"
            ],
            "properties": {
                "pipeline": {
                    "description": "User's saved pipeline",
                    "type": "object",
                    "additionalProperties": {}
                },
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "users_id": {
                    "description": "Represents the User's ID from frontend",
                    "type": "string"
                }
            }
        },
        "handlers.ReadGrammerFromUser": {
            "type": "object",
            "required": [
                "project_name",
                "rules",
                "start",
                "terminals",
                "variables"
            ],
            "properties": {
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "rules": {
                    "description": "User's defined rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.ParsingRule"
                    }
                },
                "start": {
                    "description": "User's defined start variable",
                    "type": "string",
                    "example": "S"
                },
                "terminals": {
                    "description": "User's defined terminal variables",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "KEYWORD",
                        " IDENTIFIER",
                        " OPERATOR",
                        " NUMBER",
                        " PUNCTUATION"
                    ]
                },
                "variables": {
                    "description": "User's defined variables",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "S",
                        " Decl"
                    ]
                }
            }
        },
        "handlers.Request": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "User's Email address",
                    "type": "string"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "description": "User's username",
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "handlers.RulesRequest": {
            "type": "object",
            "required": [
                "pairs",
                "project_name"
            ],
            "properties": {
                "pairs": {
                    "description": "Represents the pairs of Type and Regex",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TypeRegex"
                    }
                },
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                }
            }
        },
        "handlers.SourceCodeOnlyRequest": {
            "type": "object",
            "required": [
                "project_name",
                "source_code"
            ],
            "properties": {
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "source_code": {
                    "description": "Represents the User's source code",
                    "type": "string"
                }
            }
        },
        "handlers.TranslatorRules": {
            "type": "object",
            "required": [
                "project_name",
                "translation_rules"
            ],
            "properties": {
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "translation_rules": {
                    "description": "Translation Rules",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TranslationRule"
                    }
                }
            }
        },
        "handlers.readDFARequest": {
            "type": "object",
            "required": [
                "project_name"
            ],
            "properties": {
                "accepting_states": {
                    "description": "Represents the accepting states of the automata",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.AcceptingState"
                    }
                },
                "project_name": {
                    "description": "User's project name",
                    "type": "string"
                },
                "start_state": {
                    "description": "Represents the start state of the automata",
                    "type": "string"
                },
                "states": {
                    "description": "Represents the states of the automata",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "transitions": {
                    "description": "Represents the transitions of the automata",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Transition"
                    }
                }
            }
        },
        "services.AcceptingState": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "services.GrammarRules": {
            "type": "object",
            "properties": {
                "assignmentRule": {
                    "type": "string"
                },
                "functionRule": {
                    "type": "string"
                },
                "operatorRule": {
                    "type": "string"
                },
                "parameterRule": {
                    "type": "string"
                },
                "termRule": {
                    "type": "string"
                },
                "typeRule": {
                    "type": "string"
                },
                "variableRule": {
                    "type": "string"
                }
            }
        },
        "services.ParsingRule": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string"
                },
                "output": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.ScopeRule": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "entered": {
                    "type": "boolean"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "services.Transition": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "services.TranslationRule": {
            "type": "object",
            "properties": {
                "sequence": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "translation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.TypeRegex": {
            "type": "object",
            "properties": {
                "regex": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "services.TypeRule": {
            "type": "object",
            "properties": {
                "assignment": {
                    "type": "string"
                },
                "lhsdata": {
                    "type": "string"
                },
                "operator": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resultData": {
                    "type": "string"
                },
                "rhsdata": {
                    "type": "string"
                }
            }
        }
    }
}